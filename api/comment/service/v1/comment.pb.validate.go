// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/comment/service/v1/comment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ListCommentReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListCommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommentReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListCommentReqMultiError,
// or nil if none found.
func (m *ListCommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListCommentReqMultiError(errors)
	}
	return nil
}

// ListCommentReqMultiError is an error wrapping multiple validation errors
// returned by ListCommentReq.ValidateAll() if the designated constraints
// aren't met.
type ListCommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommentReqMultiError) AllErrors() []error { return m }

// ListCommentReqValidationError is the validation error returned by
// ListCommentReq.Validate if the designated constraints aren't met.
type ListCommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentReqValidationError) ErrorName() string { return "ListCommentReqValidationError" }

// Error satisfies the builtin error interface
func (e ListCommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentReqValidationError{}

// Validate checks the field values on ListCommentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommentReplyMultiError, or nil if none found.
func (m *ListCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCommentReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCommentReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCommentReplyValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCommentReplyMultiError(errors)
	}
	return nil
}

// ListCommentReplyMultiError is an error wrapping multiple validation errors
// returned by ListCommentReply.ValidateAll() if the designated constraints
// aren't met.
type ListCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommentReplyMultiError) AllErrors() []error { return m }

// ListCommentReplyValidationError is the validation error returned by
// ListCommentReply.Validate if the designated constraints aren't met.
type ListCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentReplyValidationError) ErrorName() string { return "ListCommentReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentReplyValidationError{}

// Validate checks the field values on CreateCommentReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentReqMultiError, or nil if none found.
func (m *CreateCommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Count

	for idx, item := range m.GetImage() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCommentReqValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCommentReqValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCommentReqValidationError{
					field:  fmt.Sprintf("Image[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateCommentReqMultiError(errors)
	}
	return nil
}

// CreateCommentReqMultiError is an error wrapping multiple validation errors
// returned by CreateCommentReq.ValidateAll() if the designated constraints
// aren't met.
type CreateCommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentReqMultiError) AllErrors() []error { return m }

// CreateCommentReqValidationError is the validation error returned by
// CreateCommentReq.Validate if the designated constraints aren't met.
type CreateCommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentReqValidationError) ErrorName() string { return "CreateCommentReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateCommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentReqValidationError{}

// Validate checks the field values on CreateCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentReplyMultiError, or nil if none found.
func (m *CreateCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Count

	for idx, item := range m.GetImage() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCommentReplyValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCommentReplyValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCommentReplyValidationError{
					field:  fmt.Sprintf("Image[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateCommentReplyMultiError(errors)
	}
	return nil
}

// CreateCommentReplyMultiError is an error wrapping multiple validation errors
// returned by CreateCommentReply.ValidateAll() if the designated constraints
// aren't met.
type CreateCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentReplyMultiError) AllErrors() []error { return m }

// CreateCommentReplyValidationError is the validation error returned by
// CreateCommentReply.Validate if the designated constraints aren't met.
type CreateCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentReplyValidationError) ErrorName() string {
	return "CreateCommentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentReplyValidationError{}

// Validate checks the field values on GetCommentReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCommentReqMultiError, or
// nil if none found.
func (m *GetCommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCommentReqMultiError(errors)
	}
	return nil
}

// GetCommentReqMultiError is an error wrapping multiple validation errors
// returned by GetCommentReq.ValidateAll() if the designated constraints
// aren't met.
type GetCommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentReqMultiError) AllErrors() []error { return m }

// GetCommentReqValidationError is the validation error returned by
// GetCommentReq.Validate if the designated constraints aren't met.
type GetCommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentReqValidationError) ErrorName() string { return "GetCommentReqValidationError" }

// Error satisfies the builtin error interface
func (e GetCommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentReqValidationError{}

// Validate checks the field values on GetCommentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentReplyMultiError, or nil if none found.
func (m *GetCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Count

	for idx, item := range m.GetImage() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommentReplyValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommentReplyValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommentReplyValidationError{
					field:  fmt.Sprintf("Image[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCommentReplyMultiError(errors)
	}
	return nil
}

// GetCommentReplyMultiError is an error wrapping multiple validation errors
// returned by GetCommentReply.ValidateAll() if the designated constraints
// aren't met.
type GetCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentReplyMultiError) AllErrors() []error { return m }

// GetCommentReplyValidationError is the validation error returned by
// GetCommentReply.Validate if the designated constraints aren't met.
type GetCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentReplyValidationError) ErrorName() string { return "GetCommentReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentReplyValidationError{}

// Validate checks the field values on UpdateCommentReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommentReqMultiError, or nil if none found.
func (m *UpdateCommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Count

	for idx, item := range m.GetImage() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateCommentReqValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateCommentReqValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateCommentReqValidationError{
					field:  fmt.Sprintf("Image[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateCommentReqMultiError(errors)
	}
	return nil
}

// UpdateCommentReqMultiError is an error wrapping multiple validation errors
// returned by UpdateCommentReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateCommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommentReqMultiError) AllErrors() []error { return m }

// UpdateCommentReqValidationError is the validation error returned by
// UpdateCommentReq.Validate if the designated constraints aren't met.
type UpdateCommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommentReqValidationError) ErrorName() string { return "UpdateCommentReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateCommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommentReqValidationError{}

// Validate checks the field values on UpdateCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommentReplyMultiError, or nil if none found.
func (m *UpdateCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Count

	for idx, item := range m.GetImage() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateCommentReplyValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateCommentReplyValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateCommentReplyValidationError{
					field:  fmt.Sprintf("Image[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateCommentReplyMultiError(errors)
	}
	return nil
}

// UpdateCommentReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateCommentReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommentReplyMultiError) AllErrors() []error { return m }

// UpdateCommentReplyValidationError is the validation error returned by
// UpdateCommentReply.Validate if the designated constraints aren't met.
type UpdateCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommentReplyValidationError) ErrorName() string {
	return "UpdateCommentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommentReplyValidationError{}

// Validate checks the field values on DeleteCommentReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentReqMultiError, or nil if none found.
func (m *DeleteCommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCommentReqMultiError(errors)
	}
	return nil
}

// DeleteCommentReqMultiError is an error wrapping multiple validation errors
// returned by DeleteCommentReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteCommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentReqMultiError) AllErrors() []error { return m }

// DeleteCommentReqValidationError is the validation error returned by
// DeleteCommentReq.Validate if the designated constraints aren't met.
type DeleteCommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentReqValidationError) ErrorName() string { return "DeleteCommentReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteCommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentReqValidationError{}

// Validate checks the field values on DeleteCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentReplyMultiError, or nil if none found.
func (m *DeleteCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCommentReplyMultiError(errors)
	}
	return nil
}

// DeleteCommentReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteCommentReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentReplyMultiError) AllErrors() []error { return m }

// DeleteCommentReplyValidationError is the validation error returned by
// DeleteCommentReply.Validate if the designated constraints aren't met.
type DeleteCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentReplyValidationError) ErrorName() string {
	return "DeleteCommentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentReplyValidationError{}

// Validate checks the field values on ListCommentReply_Comment with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommentReply_Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommentReply_Comment with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommentReply_CommentMultiError, or nil if none found.
func (m *ListCommentReply_Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommentReply_Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Count

	for idx, item := range m.GetImage() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCommentReply_CommentValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCommentReply_CommentValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCommentReply_CommentValidationError{
					field:  fmt.Sprintf("Image[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCommentReply_CommentMultiError(errors)
	}
	return nil
}

// ListCommentReply_CommentMultiError is an error wrapping multiple validation
// errors returned by ListCommentReply_Comment.ValidateAll() if the designated
// constraints aren't met.
type ListCommentReply_CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommentReply_CommentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommentReply_CommentMultiError) AllErrors() []error { return m }

// ListCommentReply_CommentValidationError is the validation error returned by
// ListCommentReply_Comment.Validate if the designated constraints aren't met.
type ListCommentReply_CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentReply_CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentReply_CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentReply_CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentReply_CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentReply_CommentValidationError) ErrorName() string {
	return "ListCommentReply_CommentValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommentReply_CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentReply_Comment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentReply_CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentReply_CommentValidationError{}

// Validate checks the field values on ListCommentReply_Comment_Image with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommentReply_Comment_Image) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommentReply_Comment_Image with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListCommentReply_Comment_ImageMultiError, or nil if none found.
func (m *ListCommentReply_Comment_Image) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommentReply_Comment_Image) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return ListCommentReply_Comment_ImageMultiError(errors)
	}
	return nil
}

// ListCommentReply_Comment_ImageMultiError is an error wrapping multiple
// validation errors returned by ListCommentReply_Comment_Image.ValidateAll()
// if the designated constraints aren't met.
type ListCommentReply_Comment_ImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommentReply_Comment_ImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommentReply_Comment_ImageMultiError) AllErrors() []error { return m }

// ListCommentReply_Comment_ImageValidationError is the validation error
// returned by ListCommentReply_Comment_Image.Validate if the designated
// constraints aren't met.
type ListCommentReply_Comment_ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentReply_Comment_ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentReply_Comment_ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentReply_Comment_ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentReply_Comment_ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentReply_Comment_ImageValidationError) ErrorName() string {
	return "ListCommentReply_Comment_ImageValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommentReply_Comment_ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentReply_Comment_Image.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentReply_Comment_ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentReply_Comment_ImageValidationError{}

// Validate checks the field values on CreateCommentReq_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentReq_Image) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentReq_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentReq_ImageMultiError, or nil if none found.
func (m *CreateCommentReq_Image) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentReq_Image) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return CreateCommentReq_ImageMultiError(errors)
	}
	return nil
}

// CreateCommentReq_ImageMultiError is an error wrapping multiple validation
// errors returned by CreateCommentReq_Image.ValidateAll() if the designated
// constraints aren't met.
type CreateCommentReq_ImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentReq_ImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentReq_ImageMultiError) AllErrors() []error { return m }

// CreateCommentReq_ImageValidationError is the validation error returned by
// CreateCommentReq_Image.Validate if the designated constraints aren't met.
type CreateCommentReq_ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentReq_ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentReq_ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentReq_ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentReq_ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentReq_ImageValidationError) ErrorName() string {
	return "CreateCommentReq_ImageValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentReq_ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentReq_Image.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentReq_ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentReq_ImageValidationError{}

// Validate checks the field values on CreateCommentReply_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentReply_Image) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentReply_Image with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentReply_ImageMultiError, or nil if none found.
func (m *CreateCommentReply_Image) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentReply_Image) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return CreateCommentReply_ImageMultiError(errors)
	}
	return nil
}

// CreateCommentReply_ImageMultiError is an error wrapping multiple validation
// errors returned by CreateCommentReply_Image.ValidateAll() if the designated
// constraints aren't met.
type CreateCommentReply_ImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentReply_ImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentReply_ImageMultiError) AllErrors() []error { return m }

// CreateCommentReply_ImageValidationError is the validation error returned by
// CreateCommentReply_Image.Validate if the designated constraints aren't met.
type CreateCommentReply_ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentReply_ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentReply_ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentReply_ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentReply_ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentReply_ImageValidationError) ErrorName() string {
	return "CreateCommentReply_ImageValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentReply_ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentReply_Image.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentReply_ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentReply_ImageValidationError{}

// Validate checks the field values on GetCommentReply_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentReply_Image) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentReply_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentReply_ImageMultiError, or nil if none found.
func (m *GetCommentReply_Image) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentReply_Image) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return GetCommentReply_ImageMultiError(errors)
	}
	return nil
}

// GetCommentReply_ImageMultiError is an error wrapping multiple validation
// errors returned by GetCommentReply_Image.ValidateAll() if the designated
// constraints aren't met.
type GetCommentReply_ImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentReply_ImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentReply_ImageMultiError) AllErrors() []error { return m }

// GetCommentReply_ImageValidationError is the validation error returned by
// GetCommentReply_Image.Validate if the designated constraints aren't met.
type GetCommentReply_ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentReply_ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentReply_ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentReply_ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentReply_ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentReply_ImageValidationError) ErrorName() string {
	return "GetCommentReply_ImageValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentReply_ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentReply_Image.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentReply_ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentReply_ImageValidationError{}

// Validate checks the field values on UpdateCommentReq_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommentReq_Image) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommentReq_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommentReq_ImageMultiError, or nil if none found.
func (m *UpdateCommentReq_Image) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommentReq_Image) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return UpdateCommentReq_ImageMultiError(errors)
	}
	return nil
}

// UpdateCommentReq_ImageMultiError is an error wrapping multiple validation
// errors returned by UpdateCommentReq_Image.ValidateAll() if the designated
// constraints aren't met.
type UpdateCommentReq_ImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommentReq_ImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommentReq_ImageMultiError) AllErrors() []error { return m }

// UpdateCommentReq_ImageValidationError is the validation error returned by
// UpdateCommentReq_Image.Validate if the designated constraints aren't met.
type UpdateCommentReq_ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommentReq_ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommentReq_ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommentReq_ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommentReq_ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommentReq_ImageValidationError) ErrorName() string {
	return "UpdateCommentReq_ImageValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommentReq_ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommentReq_Image.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommentReq_ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommentReq_ImageValidationError{}

// Validate checks the field values on UpdateCommentReply_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommentReply_Image) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommentReply_Image with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommentReply_ImageMultiError, or nil if none found.
func (m *UpdateCommentReply_Image) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommentReply_Image) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return UpdateCommentReply_ImageMultiError(errors)
	}
	return nil
}

// UpdateCommentReply_ImageMultiError is an error wrapping multiple validation
// errors returned by UpdateCommentReply_Image.ValidateAll() if the designated
// constraints aren't met.
type UpdateCommentReply_ImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommentReply_ImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommentReply_ImageMultiError) AllErrors() []error { return m }

// UpdateCommentReply_ImageValidationError is the validation error returned by
// UpdateCommentReply_Image.Validate if the designated constraints aren't met.
type UpdateCommentReply_ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommentReply_ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommentReply_ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommentReply_ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommentReply_ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommentReply_ImageValidationError) ErrorName() string {
	return "UpdateCommentReply_ImageValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommentReply_ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommentReply_Image.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommentReply_ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommentReply_ImageValidationError{}
