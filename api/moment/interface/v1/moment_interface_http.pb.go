// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.0-rc6

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type MomentInterfaceHTTPServer interface {
	CreateAddress(context.Context, *CreateAddressReq) (*CreateAddressReply, error)
	CreateCard(context.Context, *CreateCardReq) (*CreateCardReply, error)
	CreateMoment(context.Context, *CreateMomentReq) (*CreateMomentReply, error)
	DeleteCard(context.Context, *DeleteCardReq) (*DeleteCardReply, error)
	DeleteMoment(context.Context, *DeleteMomentReq) (*DeleteMomentReply, error)
	GetAddress(context.Context, *GetAddressReq) (*GetAddressReply, error)
	GetCard(context.Context, *GetCardReq) (*GetCardReply, error)
	GetMoment(context.Context, *GetMomentReq) (*GetMomentReply, error)
	ListAddress(context.Context, *ListAddressReq) (*ListAddressReply, error)
	ListCard(context.Context, *ListCardReq) (*ListCardReply, error)
	ListMoment(context.Context, *ListMomentReq) (*ListMomentReply, error)
	Login(context.Context, *LoginReq) (*LoginReply, error)
	Logout(context.Context, *LogoutReq) (*LogoutReply, error)
	Register(context.Context, *RegisterReq) (*RegisterReply, error)
}

func RegisterMomentInterfaceHTTPServer(s *http.Server, srv MomentInterfaceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/register", _MomentInterface_Register0_HTTP_Handler(srv))
	r.POST("/v1/login", _MomentInterface_Login0_HTTP_Handler(srv))
	r.POST("/v1/logout", _MomentInterface_Logout0_HTTP_Handler(srv))
	r.GET("/v1/user/addresses", _MomentInterface_ListAddress0_HTTP_Handler(srv))
	r.POST("/v1/user/addresses", _MomentInterface_CreateAddress0_HTTP_Handler(srv))
	r.GET("/v1/user/addresses/{id}", _MomentInterface_GetAddress0_HTTP_Handler(srv))
	r.GET("/v1/user/cards", _MomentInterface_ListCard0_HTTP_Handler(srv))
	r.POST("/v1/user/cards", _MomentInterface_CreateCard0_HTTP_Handler(srv))
	r.GET("/v1/user/cards/{id}", _MomentInterface_GetCard0_HTTP_Handler(srv))
	r.DELETE("/v1/user/cards/{id}", _MomentInterface_DeleteCard0_HTTP_Handler(srv))
	r.POST("/v1/moments", _MomentInterface_CreateMoment0_HTTP_Handler(srv))
	r.POST("/v1/moments", _MomentInterface_GetMoment0_HTTP_Handler(srv))
	r.GET("/v1/moments", _MomentInterface_ListMoment0_HTTP_Handler(srv))
	r.DELETE("/v1/moments", _MomentInterface_DeleteMoment0_HTTP_Handler(srv))
}

func _MomentInterface_Register0_HTTP_Handler(srv MomentInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/moment.interface.v1.MomentInterface/Register")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _MomentInterface_Login0_HTTP_Handler(srv MomentInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/moment.interface.v1.MomentInterface/Login")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _MomentInterface_Logout0_HTTP_Handler(srv MomentInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/moment.interface.v1.MomentInterface/Logout")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutReply)
		return ctx.Result(200, reply)
	}
}

func _MomentInterface_ListAddress0_HTTP_Handler(srv MomentInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAddressReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/moment.interface.v1.MomentInterface/ListAddress")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAddress(ctx, req.(*ListAddressReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAddressReply)
		return ctx.Result(200, reply)
	}
}

func _MomentInterface_CreateAddress0_HTTP_Handler(srv MomentInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAddressReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/moment.interface.v1.MomentInterface/CreateAddress")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAddress(ctx, req.(*CreateAddressReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAddressReply)
		return ctx.Result(200, reply)
	}
}

func _MomentInterface_GetAddress0_HTTP_Handler(srv MomentInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAddressReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/moment.interface.v1.MomentInterface/GetAddress")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAddress(ctx, req.(*GetAddressReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAddressReply)
		return ctx.Result(200, reply)
	}
}

func _MomentInterface_ListCard0_HTTP_Handler(srv MomentInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCardReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/moment.interface.v1.MomentInterface/ListCard")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCard(ctx, req.(*ListCardReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCardReply)
		return ctx.Result(200, reply)
	}
}

func _MomentInterface_CreateCard0_HTTP_Handler(srv MomentInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCardReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/moment.interface.v1.MomentInterface/CreateCard")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCard(ctx, req.(*CreateCardReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCardReply)
		return ctx.Result(200, reply)
	}
}

func _MomentInterface_GetCard0_HTTP_Handler(srv MomentInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCardReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/moment.interface.v1.MomentInterface/GetCard")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCard(ctx, req.(*GetCardReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCardReply)
		return ctx.Result(200, reply)
	}
}

func _MomentInterface_DeleteCard0_HTTP_Handler(srv MomentInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCardReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/moment.interface.v1.MomentInterface/DeleteCard")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCard(ctx, req.(*DeleteCardReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCardReply)
		return ctx.Result(200, reply)
	}
}

func _MomentInterface_CreateMoment0_HTTP_Handler(srv MomentInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateMomentReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/moment.interface.v1.MomentInterface/CreateMoment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMoment(ctx, req.(*CreateMomentReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateMomentReply)
		return ctx.Result(200, reply)
	}
}

func _MomentInterface_GetMoment0_HTTP_Handler(srv MomentInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMomentReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/moment.interface.v1.MomentInterface/GetMoment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMoment(ctx, req.(*GetMomentReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMomentReply)
		return ctx.Result(200, reply)
	}
}

func _MomentInterface_ListMoment0_HTTP_Handler(srv MomentInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMomentReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/moment.interface.v1.MomentInterface/ListMoment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMoment(ctx, req.(*ListMomentReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMomentReply)
		return ctx.Result(200, reply)
	}
}

func _MomentInterface_DeleteMoment0_HTTP_Handler(srv MomentInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteMomentReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/moment.interface.v1.MomentInterface/DeleteMoment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMoment(ctx, req.(*DeleteMomentReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteMomentReply)
		return ctx.Result(200, reply)
	}
}

type MomentInterfaceHTTPClient interface {
	CreateAddress(ctx context.Context, req *CreateAddressReq, opts ...http.CallOption) (rsp *CreateAddressReply, err error)
	CreateCard(ctx context.Context, req *CreateCardReq, opts ...http.CallOption) (rsp *CreateCardReply, err error)
	CreateMoment(ctx context.Context, req *CreateMomentReq, opts ...http.CallOption) (rsp *CreateMomentReply, err error)
	DeleteCard(ctx context.Context, req *DeleteCardReq, opts ...http.CallOption) (rsp *DeleteCardReply, err error)
	DeleteMoment(ctx context.Context, req *DeleteMomentReq, opts ...http.CallOption) (rsp *DeleteMomentReply, err error)
	GetAddress(ctx context.Context, req *GetAddressReq, opts ...http.CallOption) (rsp *GetAddressReply, err error)
	GetCard(ctx context.Context, req *GetCardReq, opts ...http.CallOption) (rsp *GetCardReply, err error)
	GetMoment(ctx context.Context, req *GetMomentReq, opts ...http.CallOption) (rsp *GetMomentReply, err error)
	ListAddress(ctx context.Context, req *ListAddressReq, opts ...http.CallOption) (rsp *ListAddressReply, err error)
	ListCard(ctx context.Context, req *ListCardReq, opts ...http.CallOption) (rsp *ListCardReply, err error)
	ListMoment(ctx context.Context, req *ListMomentReq, opts ...http.CallOption) (rsp *ListMomentReply, err error)
	Login(ctx context.Context, req *LoginReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	Logout(ctx context.Context, req *LogoutReq, opts ...http.CallOption) (rsp *LogoutReply, err error)
	Register(ctx context.Context, req *RegisterReq, opts ...http.CallOption) (rsp *RegisterReply, err error)
}

type MomentInterfaceHTTPClientImpl struct {
	cc *http.Client
}

func NewMomentInterfaceHTTPClient(client *http.Client) MomentInterfaceHTTPClient {
	return &MomentInterfaceHTTPClientImpl{client}
}

func (c *MomentInterfaceHTTPClientImpl) CreateAddress(ctx context.Context, in *CreateAddressReq, opts ...http.CallOption) (*CreateAddressReply, error) {
	var out CreateAddressReply
	pattern := "/v1/user/addresses"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/moment.interface.v1.MomentInterface/CreateAddress"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MomentInterfaceHTTPClientImpl) CreateCard(ctx context.Context, in *CreateCardReq, opts ...http.CallOption) (*CreateCardReply, error) {
	var out CreateCardReply
	pattern := "/v1/user/cards"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/moment.interface.v1.MomentInterface/CreateCard"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MomentInterfaceHTTPClientImpl) CreateMoment(ctx context.Context, in *CreateMomentReq, opts ...http.CallOption) (*CreateMomentReply, error) {
	var out CreateMomentReply
	pattern := "/v1/moments"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/moment.interface.v1.MomentInterface/CreateMoment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MomentInterfaceHTTPClientImpl) DeleteCard(ctx context.Context, in *DeleteCardReq, opts ...http.CallOption) (*DeleteCardReply, error) {
	var out DeleteCardReply
	pattern := "/v1/user/cards/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/moment.interface.v1.MomentInterface/DeleteCard"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MomentInterfaceHTTPClientImpl) DeleteMoment(ctx context.Context, in *DeleteMomentReq, opts ...http.CallOption) (*DeleteMomentReply, error) {
	var out DeleteMomentReply
	pattern := "/v1/moments"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/moment.interface.v1.MomentInterface/DeleteMoment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MomentInterfaceHTTPClientImpl) GetAddress(ctx context.Context, in *GetAddressReq, opts ...http.CallOption) (*GetAddressReply, error) {
	var out GetAddressReply
	pattern := "/v1/user/addresses/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/moment.interface.v1.MomentInterface/GetAddress"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MomentInterfaceHTTPClientImpl) GetCard(ctx context.Context, in *GetCardReq, opts ...http.CallOption) (*GetCardReply, error) {
	var out GetCardReply
	pattern := "/v1/user/cards/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/moment.interface.v1.MomentInterface/GetCard"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MomentInterfaceHTTPClientImpl) GetMoment(ctx context.Context, in *GetMomentReq, opts ...http.CallOption) (*GetMomentReply, error) {
	var out GetMomentReply
	pattern := "/v1/moments"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/moment.interface.v1.MomentInterface/GetMoment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MomentInterfaceHTTPClientImpl) ListAddress(ctx context.Context, in *ListAddressReq, opts ...http.CallOption) (*ListAddressReply, error) {
	var out ListAddressReply
	pattern := "/v1/user/addresses"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/moment.interface.v1.MomentInterface/ListAddress"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MomentInterfaceHTTPClientImpl) ListCard(ctx context.Context, in *ListCardReq, opts ...http.CallOption) (*ListCardReply, error) {
	var out ListCardReply
	pattern := "/v1/user/cards"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/moment.interface.v1.MomentInterface/ListCard"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MomentInterfaceHTTPClientImpl) ListMoment(ctx context.Context, in *ListMomentReq, opts ...http.CallOption) (*ListMomentReply, error) {
	var out ListMomentReply
	pattern := "/v1/moments"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/moment.interface.v1.MomentInterface/ListMoment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MomentInterfaceHTTPClientImpl) Login(ctx context.Context, in *LoginReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/moment.interface.v1.MomentInterface/Login"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MomentInterfaceHTTPClientImpl) Logout(ctx context.Context, in *LogoutReq, opts ...http.CallOption) (*LogoutReply, error) {
	var out LogoutReply
	pattern := "/v1/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/moment.interface.v1.MomentInterface/Logout"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MomentInterfaceHTTPClientImpl) Register(ctx context.Context, in *RegisterReq, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/v1/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/moment.interface.v1.MomentInterface/Register"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
