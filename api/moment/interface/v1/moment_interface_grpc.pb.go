// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MomentInterfaceClient is the client API for MomentInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MomentInterfaceClient interface {
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error)
	ListAddress(ctx context.Context, in *ListAddressReq, opts ...grpc.CallOption) (*ListAddressReply, error)
	CreateAddress(ctx context.Context, in *CreateAddressReq, opts ...grpc.CallOption) (*CreateAddressReply, error)
	GetAddress(ctx context.Context, in *GetAddressReq, opts ...grpc.CallOption) (*GetAddressReply, error)
	ListCard(ctx context.Context, in *ListCardReq, opts ...grpc.CallOption) (*ListCardReply, error)
	CreateCard(ctx context.Context, in *CreateCardReq, opts ...grpc.CallOption) (*CreateCardReply, error)
	GetCard(ctx context.Context, in *GetCardReq, opts ...grpc.CallOption) (*GetCardReply, error)
	DeleteCard(ctx context.Context, in *DeleteCardReq, opts ...grpc.CallOption) (*DeleteCardReply, error)
	CreateMoment(ctx context.Context, in *CreateMomentReq, opts ...grpc.CallOption) (*CreateMomentReply, error)
	GetMoment(ctx context.Context, in *GetMomentReq, opts ...grpc.CallOption) (*GetMomentReply, error)
	ListMoment(ctx context.Context, in *ListMomentReq, opts ...grpc.CallOption) (*ListMomentReply, error)
}

type momentInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewMomentInterfaceClient(cc grpc.ClientConnInterface) MomentInterfaceClient {
	return &momentInterfaceClient{cc}
}

func (c *momentInterfaceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/moment.interface.v1.MomentInterface/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentInterfaceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/moment.interface.v1.MomentInterface/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentInterfaceClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := c.cc.Invoke(ctx, "/moment.interface.v1.MomentInterface/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentInterfaceClient) ListAddress(ctx context.Context, in *ListAddressReq, opts ...grpc.CallOption) (*ListAddressReply, error) {
	out := new(ListAddressReply)
	err := c.cc.Invoke(ctx, "/moment.interface.v1.MomentInterface/ListAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentInterfaceClient) CreateAddress(ctx context.Context, in *CreateAddressReq, opts ...grpc.CallOption) (*CreateAddressReply, error) {
	out := new(CreateAddressReply)
	err := c.cc.Invoke(ctx, "/moment.interface.v1.MomentInterface/CreateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentInterfaceClient) GetAddress(ctx context.Context, in *GetAddressReq, opts ...grpc.CallOption) (*GetAddressReply, error) {
	out := new(GetAddressReply)
	err := c.cc.Invoke(ctx, "/moment.interface.v1.MomentInterface/GetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentInterfaceClient) ListCard(ctx context.Context, in *ListCardReq, opts ...grpc.CallOption) (*ListCardReply, error) {
	out := new(ListCardReply)
	err := c.cc.Invoke(ctx, "/moment.interface.v1.MomentInterface/ListCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentInterfaceClient) CreateCard(ctx context.Context, in *CreateCardReq, opts ...grpc.CallOption) (*CreateCardReply, error) {
	out := new(CreateCardReply)
	err := c.cc.Invoke(ctx, "/moment.interface.v1.MomentInterface/CreateCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentInterfaceClient) GetCard(ctx context.Context, in *GetCardReq, opts ...grpc.CallOption) (*GetCardReply, error) {
	out := new(GetCardReply)
	err := c.cc.Invoke(ctx, "/moment.interface.v1.MomentInterface/GetCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentInterfaceClient) DeleteCard(ctx context.Context, in *DeleteCardReq, opts ...grpc.CallOption) (*DeleteCardReply, error) {
	out := new(DeleteCardReply)
	err := c.cc.Invoke(ctx, "/moment.interface.v1.MomentInterface/DeleteCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentInterfaceClient) CreateMoment(ctx context.Context, in *CreateMomentReq, opts ...grpc.CallOption) (*CreateMomentReply, error) {
	out := new(CreateMomentReply)
	err := c.cc.Invoke(ctx, "/moment.interface.v1.MomentInterface/CreateMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentInterfaceClient) GetMoment(ctx context.Context, in *GetMomentReq, opts ...grpc.CallOption) (*GetMomentReply, error) {
	out := new(GetMomentReply)
	err := c.cc.Invoke(ctx, "/moment.interface.v1.MomentInterface/GetMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentInterfaceClient) ListMoment(ctx context.Context, in *ListMomentReq, opts ...grpc.CallOption) (*ListMomentReply, error) {
	out := new(ListMomentReply)
	err := c.cc.Invoke(ctx, "/moment.interface.v1.MomentInterface/ListMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MomentInterfaceServer is the server API for MomentInterface service.
// All implementations must embed UnimplementedMomentInterfaceServer
// for forward compatibility
type MomentInterfaceServer interface {
	Register(context.Context, *RegisterReq) (*RegisterReply, error)
	Login(context.Context, *LoginReq) (*LoginReply, error)
	Logout(context.Context, *LogoutReq) (*LogoutReply, error)
	ListAddress(context.Context, *ListAddressReq) (*ListAddressReply, error)
	CreateAddress(context.Context, *CreateAddressReq) (*CreateAddressReply, error)
	GetAddress(context.Context, *GetAddressReq) (*GetAddressReply, error)
	ListCard(context.Context, *ListCardReq) (*ListCardReply, error)
	CreateCard(context.Context, *CreateCardReq) (*CreateCardReply, error)
	GetCard(context.Context, *GetCardReq) (*GetCardReply, error)
	DeleteCard(context.Context, *DeleteCardReq) (*DeleteCardReply, error)
	CreateMoment(context.Context, *CreateMomentReq) (*CreateMomentReply, error)
	GetMoment(context.Context, *GetMomentReq) (*GetMomentReply, error)
	ListMoment(context.Context, *ListMomentReq) (*ListMomentReply, error)
	mustEmbedUnimplementedMomentInterfaceServer()
}

// UnimplementedMomentInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedMomentInterfaceServer struct {
}

func (UnimplementedMomentInterfaceServer) Register(context.Context, *RegisterReq) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedMomentInterfaceServer) Login(context.Context, *LoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedMomentInterfaceServer) Logout(context.Context, *LogoutReq) (*LogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedMomentInterfaceServer) ListAddress(context.Context, *ListAddressReq) (*ListAddressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddress not implemented")
}
func (UnimplementedMomentInterfaceServer) CreateAddress(context.Context, *CreateAddressReq) (*CreateAddressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddress not implemented")
}
func (UnimplementedMomentInterfaceServer) GetAddress(context.Context, *GetAddressReq) (*GetAddressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedMomentInterfaceServer) ListCard(context.Context, *ListCardReq) (*ListCardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCard not implemented")
}
func (UnimplementedMomentInterfaceServer) CreateCard(context.Context, *CreateCardReq) (*CreateCardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCard not implemented")
}
func (UnimplementedMomentInterfaceServer) GetCard(context.Context, *GetCardReq) (*GetCardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCard not implemented")
}
func (UnimplementedMomentInterfaceServer) DeleteCard(context.Context, *DeleteCardReq) (*DeleteCardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCard not implemented")
}
func (UnimplementedMomentInterfaceServer) CreateMoment(context.Context, *CreateMomentReq) (*CreateMomentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMoment not implemented")
}
func (UnimplementedMomentInterfaceServer) GetMoment(context.Context, *GetMomentReq) (*GetMomentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoment not implemented")
}
func (UnimplementedMomentInterfaceServer) ListMoment(context.Context, *ListMomentReq) (*ListMomentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMoment not implemented")
}
func (UnimplementedMomentInterfaceServer) mustEmbedUnimplementedMomentInterfaceServer() {}

// UnsafeMomentInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MomentInterfaceServer will
// result in compilation errors.
type UnsafeMomentInterfaceServer interface {
	mustEmbedUnimplementedMomentInterfaceServer()
}

func RegisterMomentInterfaceServer(s grpc.ServiceRegistrar, srv MomentInterfaceServer) {
	s.RegisterService(&MomentInterface_ServiceDesc, srv)
}

func _MomentInterface_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentInterfaceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.interface.v1.MomentInterface/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentInterfaceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentInterface_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentInterfaceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.interface.v1.MomentInterface/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentInterfaceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentInterface_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentInterfaceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.interface.v1.MomentInterface/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentInterfaceServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentInterface_ListAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentInterfaceServer).ListAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.interface.v1.MomentInterface/ListAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentInterfaceServer).ListAddress(ctx, req.(*ListAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentInterface_CreateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentInterfaceServer).CreateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.interface.v1.MomentInterface/CreateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentInterfaceServer).CreateAddress(ctx, req.(*CreateAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentInterface_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentInterfaceServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.interface.v1.MomentInterface/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentInterfaceServer).GetAddress(ctx, req.(*GetAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentInterface_ListCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentInterfaceServer).ListCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.interface.v1.MomentInterface/ListCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentInterfaceServer).ListCard(ctx, req.(*ListCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentInterface_CreateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentInterfaceServer).CreateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.interface.v1.MomentInterface/CreateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentInterfaceServer).CreateCard(ctx, req.(*CreateCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentInterface_GetCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentInterfaceServer).GetCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.interface.v1.MomentInterface/GetCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentInterfaceServer).GetCard(ctx, req.(*GetCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentInterface_DeleteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentInterfaceServer).DeleteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.interface.v1.MomentInterface/DeleteCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentInterfaceServer).DeleteCard(ctx, req.(*DeleteCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentInterface_CreateMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMomentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentInterfaceServer).CreateMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.interface.v1.MomentInterface/CreateMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentInterfaceServer).CreateMoment(ctx, req.(*CreateMomentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentInterface_GetMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMomentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentInterfaceServer).GetMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.interface.v1.MomentInterface/GetMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentInterfaceServer).GetMoment(ctx, req.(*GetMomentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentInterface_ListMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMomentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentInterfaceServer).ListMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.interface.v1.MomentInterface/ListMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentInterfaceServer).ListMoment(ctx, req.(*ListMomentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MomentInterface_ServiceDesc is the grpc.ServiceDesc for MomentInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MomentInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moment.interface.v1.MomentInterface",
	HandlerType: (*MomentInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _MomentInterface_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _MomentInterface_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _MomentInterface_Logout_Handler,
		},
		{
			MethodName: "ListAddress",
			Handler:    _MomentInterface_ListAddress_Handler,
		},
		{
			MethodName: "CreateAddress",
			Handler:    _MomentInterface_CreateAddress_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _MomentInterface_GetAddress_Handler,
		},
		{
			MethodName: "ListCard",
			Handler:    _MomentInterface_ListCard_Handler,
		},
		{
			MethodName: "CreateCard",
			Handler:    _MomentInterface_CreateCard_Handler,
		},
		{
			MethodName: "GetCard",
			Handler:    _MomentInterface_GetCard_Handler,
		},
		{
			MethodName: "DeleteCard",
			Handler:    _MomentInterface_DeleteCard_Handler,
		},
		{
			MethodName: "CreateMoment",
			Handler:    _MomentInterface_CreateMoment_Handler,
		},
		{
			MethodName: "GetMoment",
			Handler:    _MomentInterface_GetMoment_Handler,
		},
		{
			MethodName: "ListMoment",
			Handler:    _MomentInterface_ListMoment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/moment_interface.proto",
}
