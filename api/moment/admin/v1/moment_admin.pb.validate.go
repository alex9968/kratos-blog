// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/moment/admin/v1/moment_admin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on LoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReqMultiError, or nil
// if none found.
func (m *LoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginReqMultiError(errors)
	}
	return nil
}

// LoginReqMultiError is an error wrapping multiple validation errors returned
// by LoginReq.ValidateAll() if the designated constraints aren't met.
type LoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReqMultiError) AllErrors() []error { return m }

// LoginReqValidationError is the validation error returned by
// LoginReq.Validate if the designated constraints aren't met.
type LoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReqValidationError) ErrorName() string { return "LoginReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReqValidationError{}

// Validate checks the field values on LoginReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReplyMultiError, or
// nil if none found.
func (m *LoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LoginReplyMultiError(errors)
	}
	return nil
}

// LoginReplyMultiError is an error wrapping multiple validation errors
// returned by LoginReply.ValidateAll() if the designated constraints aren't met.
type LoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReplyMultiError) AllErrors() []error { return m }

// LoginReplyValidationError is the validation error returned by
// LoginReply.Validate if the designated constraints aren't met.
type LoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReplyValidationError) ErrorName() string { return "LoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReplyValidationError{}

// Validate checks the field values on LogoutReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutReqMultiError, or nil
// if none found.
func (m *LogoutReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutReqMultiError(errors)
	}
	return nil
}

// LogoutReqMultiError is an error wrapping multiple validation errors returned
// by LogoutReq.ValidateAll() if the designated constraints aren't met.
type LogoutReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutReqMultiError) AllErrors() []error { return m }

// LogoutReqValidationError is the validation error returned by
// LogoutReq.Validate if the designated constraints aren't met.
type LogoutReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutReqValidationError) ErrorName() string { return "LogoutReqValidationError" }

// Error satisfies the builtin error interface
func (e LogoutReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutReqValidationError{}

// Validate checks the field values on LogoutReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutReplyMultiError, or
// nil if none found.
func (m *LogoutReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutReplyMultiError(errors)
	}
	return nil
}

// LogoutReplyMultiError is an error wrapping multiple validation errors
// returned by LogoutReply.ValidateAll() if the designated constraints aren't met.
type LogoutReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutReplyMultiError) AllErrors() []error { return m }

// LogoutReplyValidationError is the validation error returned by
// LogoutReply.Validate if the designated constraints aren't met.
type LogoutReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutReplyValidationError) ErrorName() string { return "LogoutReplyValidationError" }

// Error satisfies the builtin error interface
func (e LogoutReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutReplyValidationError{}

// Validate checks the field values on ListBeerReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListBeerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBeerReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListBeerReqMultiError, or
// nil if none found.
func (m *ListBeerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBeerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListBeerReqMultiError(errors)
	}
	return nil
}

// ListBeerReqMultiError is an error wrapping multiple validation errors
// returned by ListBeerReq.ValidateAll() if the designated constraints aren't met.
type ListBeerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBeerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBeerReqMultiError) AllErrors() []error { return m }

// ListBeerReqValidationError is the validation error returned by
// ListBeerReq.Validate if the designated constraints aren't met.
type ListBeerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBeerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBeerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBeerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBeerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBeerReqValidationError) ErrorName() string { return "ListBeerReqValidationError" }

// Error satisfies the builtin error interface
func (e ListBeerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBeerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBeerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBeerReqValidationError{}

// Validate checks the field values on ListBeerReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListBeerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBeerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListBeerReplyMultiError, or
// nil if none found.
func (m *ListBeerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBeerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListBeerReplyMultiError(errors)
	}
	return nil
}

// ListBeerReplyMultiError is an error wrapping multiple validation errors
// returned by ListBeerReply.ValidateAll() if the designated constraints
// aren't met.
type ListBeerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBeerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBeerReplyMultiError) AllErrors() []error { return m }

// ListBeerReplyValidationError is the validation error returned by
// ListBeerReply.Validate if the designated constraints aren't met.
type ListBeerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBeerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBeerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBeerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBeerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBeerReplyValidationError) ErrorName() string { return "ListBeerReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListBeerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBeerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBeerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBeerReplyValidationError{}

// Validate checks the field values on CreateBeerReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateBeerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBeerReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateBeerReqMultiError, or
// nil if none found.
func (m *CreateBeerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBeerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateBeerReqMultiError(errors)
	}
	return nil
}

// CreateBeerReqMultiError is an error wrapping multiple validation errors
// returned by CreateBeerReq.ValidateAll() if the designated constraints
// aren't met.
type CreateBeerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBeerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBeerReqMultiError) AllErrors() []error { return m }

// CreateBeerReqValidationError is the validation error returned by
// CreateBeerReq.Validate if the designated constraints aren't met.
type CreateBeerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBeerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBeerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBeerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBeerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBeerReqValidationError) ErrorName() string { return "CreateBeerReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateBeerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBeerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBeerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBeerReqValidationError{}

// Validate checks the field values on CreateBeerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateBeerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBeerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBeerReplyMultiError, or nil if none found.
func (m *CreateBeerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBeerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateBeerReplyMultiError(errors)
	}
	return nil
}

// CreateBeerReplyMultiError is an error wrapping multiple validation errors
// returned by CreateBeerReply.ValidateAll() if the designated constraints
// aren't met.
type CreateBeerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBeerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBeerReplyMultiError) AllErrors() []error { return m }

// CreateBeerReplyValidationError is the validation error returned by
// CreateBeerReply.Validate if the designated constraints aren't met.
type CreateBeerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBeerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBeerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBeerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBeerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBeerReplyValidationError) ErrorName() string { return "CreateBeerReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateBeerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBeerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBeerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBeerReplyValidationError{}

// Validate checks the field values on UpdateBeerReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateBeerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBeerReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateBeerReqMultiError, or
// nil if none found.
func (m *UpdateBeerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBeerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateBeerReqMultiError(errors)
	}
	return nil
}

// UpdateBeerReqMultiError is an error wrapping multiple validation errors
// returned by UpdateBeerReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateBeerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBeerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBeerReqMultiError) AllErrors() []error { return m }

// UpdateBeerReqValidationError is the validation error returned by
// UpdateBeerReq.Validate if the designated constraints aren't met.
type UpdateBeerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBeerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBeerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBeerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBeerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBeerReqValidationError) ErrorName() string { return "UpdateBeerReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateBeerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBeerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBeerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBeerReqValidationError{}

// Validate checks the field values on UpdateBeerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateBeerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBeerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBeerReplyMultiError, or nil if none found.
func (m *UpdateBeerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBeerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateBeerReplyMultiError(errors)
	}
	return nil
}

// UpdateBeerReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateBeerReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateBeerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBeerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBeerReplyMultiError) AllErrors() []error { return m }

// UpdateBeerReplyValidationError is the validation error returned by
// UpdateBeerReply.Validate if the designated constraints aren't met.
type UpdateBeerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBeerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBeerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBeerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBeerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBeerReplyValidationError) ErrorName() string { return "UpdateBeerReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateBeerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBeerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBeerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBeerReplyValidationError{}

// Validate checks the field values on DeleteBeerReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteBeerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBeerReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteBeerReqMultiError, or
// nil if none found.
func (m *DeleteBeerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBeerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteBeerReqMultiError(errors)
	}
	return nil
}

// DeleteBeerReqMultiError is an error wrapping multiple validation errors
// returned by DeleteBeerReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteBeerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBeerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBeerReqMultiError) AllErrors() []error { return m }

// DeleteBeerReqValidationError is the validation error returned by
// DeleteBeerReq.Validate if the designated constraints aren't met.
type DeleteBeerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBeerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBeerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBeerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBeerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBeerReqValidationError) ErrorName() string { return "DeleteBeerReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteBeerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBeerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBeerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBeerReqValidationError{}

// Validate checks the field values on DeleteBeerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteBeerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBeerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBeerReplyMultiError, or nil if none found.
func (m *DeleteBeerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBeerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteBeerReplyMultiError(errors)
	}
	return nil
}

// DeleteBeerReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteBeerReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteBeerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBeerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBeerReplyMultiError) AllErrors() []error { return m }

// DeleteBeerReplyValidationError is the validation error returned by
// DeleteBeerReply.Validate if the designated constraints aren't met.
type DeleteBeerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBeerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBeerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBeerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBeerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBeerReplyValidationError) ErrorName() string { return "DeleteBeerReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteBeerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBeerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBeerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBeerReplyValidationError{}

// Validate checks the field values on ListOrderReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrderReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListOrderReqMultiError, or
// nil if none found.
func (m *ListOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListOrderReqMultiError(errors)
	}
	return nil
}

// ListOrderReqMultiError is an error wrapping multiple validation errors
// returned by ListOrderReq.ValidateAll() if the designated constraints aren't met.
type ListOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrderReqMultiError) AllErrors() []error { return m }

// ListOrderReqValidationError is the validation error returned by
// ListOrderReq.Validate if the designated constraints aren't met.
type ListOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrderReqValidationError) ErrorName() string { return "ListOrderReqValidationError" }

// Error satisfies the builtin error interface
func (e ListOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrderReqValidationError{}

// Validate checks the field values on ListOrderReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOrderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrderReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListOrderReplyMultiError,
// or nil if none found.
func (m *ListOrderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListOrderReplyMultiError(errors)
	}
	return nil
}

// ListOrderReplyMultiError is an error wrapping multiple validation errors
// returned by ListOrderReply.ValidateAll() if the designated constraints
// aren't met.
type ListOrderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrderReplyMultiError) AllErrors() []error { return m }

// ListOrderReplyValidationError is the validation error returned by
// ListOrderReply.Validate if the designated constraints aren't met.
type ListOrderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrderReplyValidationError) ErrorName() string { return "ListOrderReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListOrderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrderReplyValidationError{}

// Validate checks the field values on GetOrderReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetOrderReqMultiError, or
// nil if none found.
func (m *GetOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOrderReqMultiError(errors)
	}
	return nil
}

// GetOrderReqMultiError is an error wrapping multiple validation errors
// returned by GetOrderReq.ValidateAll() if the designated constraints aren't met.
type GetOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderReqMultiError) AllErrors() []error { return m }

// GetOrderReqValidationError is the validation error returned by
// GetOrderReq.Validate if the designated constraints aren't met.
type GetOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderReqValidationError) ErrorName() string { return "GetOrderReqValidationError" }

// Error satisfies the builtin error interface
func (e GetOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderReqValidationError{}

// Validate checks the field values on GetOrderReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOrderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetOrderReplyMultiError, or
// nil if none found.
func (m *GetOrderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOrderReplyMultiError(errors)
	}
	return nil
}

// GetOrderReplyMultiError is an error wrapping multiple validation errors
// returned by GetOrderReply.ValidateAll() if the designated constraints
// aren't met.
type GetOrderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderReplyMultiError) AllErrors() []error { return m }

// GetOrderReplyValidationError is the validation error returned by
// GetOrderReply.Validate if the designated constraints aren't met.
type GetOrderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderReplyValidationError) ErrorName() string { return "GetOrderReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetOrderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderReplyValidationError{}

// Validate checks the field values on ListCustomerReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCustomerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCustomerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCustomerReqMultiError, or nil if none found.
func (m *ListCustomerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCustomerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCustomerReqMultiError(errors)
	}
	return nil
}

// ListCustomerReqMultiError is an error wrapping multiple validation errors
// returned by ListCustomerReq.ValidateAll() if the designated constraints
// aren't met.
type ListCustomerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCustomerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCustomerReqMultiError) AllErrors() []error { return m }

// ListCustomerReqValidationError is the validation error returned by
// ListCustomerReq.Validate if the designated constraints aren't met.
type ListCustomerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCustomerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCustomerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCustomerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCustomerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCustomerReqValidationError) ErrorName() string { return "ListCustomerReqValidationError" }

// Error satisfies the builtin error interface
func (e ListCustomerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCustomerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCustomerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCustomerReqValidationError{}

// Validate checks the field values on ListCustomerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCustomerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCustomerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCustomerReplyMultiError, or nil if none found.
func (m *ListCustomerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCustomerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCustomerReplyMultiError(errors)
	}
	return nil
}

// ListCustomerReplyMultiError is an error wrapping multiple validation errors
// returned by ListCustomerReply.ValidateAll() if the designated constraints
// aren't met.
type ListCustomerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCustomerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCustomerReplyMultiError) AllErrors() []error { return m }

// ListCustomerReplyValidationError is the validation error returned by
// ListCustomerReply.Validate if the designated constraints aren't met.
type ListCustomerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCustomerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCustomerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCustomerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCustomerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCustomerReplyValidationError) ErrorName() string {
	return "ListCustomerReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListCustomerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCustomerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCustomerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCustomerReplyValidationError{}

// Validate checks the field values on GetCustomerReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCustomerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomerReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCustomerReqMultiError,
// or nil if none found.
func (m *GetCustomerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCustomerReqMultiError(errors)
	}
	return nil
}

// GetCustomerReqMultiError is an error wrapping multiple validation errors
// returned by GetCustomerReq.ValidateAll() if the designated constraints
// aren't met.
type GetCustomerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomerReqMultiError) AllErrors() []error { return m }

// GetCustomerReqValidationError is the validation error returned by
// GetCustomerReq.Validate if the designated constraints aren't met.
type GetCustomerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerReqValidationError) ErrorName() string { return "GetCustomerReqValidationError" }

// Error satisfies the builtin error interface
func (e GetCustomerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerReqValidationError{}

// Validate checks the field values on GetCustomerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCustomerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCustomerReplyMultiError, or nil if none found.
func (m *GetCustomerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCustomerReplyMultiError(errors)
	}
	return nil
}

// GetCustomerReplyMultiError is an error wrapping multiple validation errors
// returned by GetCustomerReply.ValidateAll() if the designated constraints
// aren't met.
type GetCustomerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomerReplyMultiError) AllErrors() []error { return m }

// GetCustomerReplyValidationError is the validation error returned by
// GetCustomerReply.Validate if the designated constraints aren't met.
type GetCustomerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerReplyValidationError) ErrorName() string { return "GetCustomerReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetCustomerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerReplyValidationError{}
